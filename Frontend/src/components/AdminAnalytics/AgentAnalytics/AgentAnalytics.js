import axios from "axios";
import React, { useState, useEffect, PureComponent } from "react";
import { baseURL } from "../../../Server";
import {
  LineChart,
  Line,
  Bar,
  BarChart,
  XAxis,
  YAxis,
  Label,
  Tooltip,
  Legend,
  CartesianGrid,
  Cell,
  ResponsiveContainer,
} from "recharts";
import styles from "./AgentAnalytics.module.scss";
import { bold } from "@cloudinary/url-gen/qualifiers/fontWeight";
export default function AgentAnalytics() {
  const [agentList, setAgentList] = useState([]);
  const [policyList, setPolicyList] = useState([]);
  const [userPolicyList, setUserPolicyList] = useState([]);
  const token = localStorage.getItem("login")
  useEffect(() => {
    const fetchData = async () => {
      try {
        const agentListResponse = await axios.get(baseURL + "/user/agents", {headers: { Authorization: `Bearer ${token}`, credentials: true }});
        const policyListResponse = await axios.get(baseURL + "/policy", {headers: { Authorization: `Bearer ${token}`, credentials: true }});
        const userPolicyListResponse = await axios.get(
          baseURL + "/policy/user-policies", {headers: { Authorization: `Bearer ${token}`, credentials: true }}
        );

        setAgentList(agentListResponse.data);
        setPolicyList(policyListResponse.data);
        setUserPolicyList(userPolicyListResponse.data);
      } catch (error) {
        console.log(error);
      }
    };

    fetchData();
  }, []);

  function calculatePoliciesSoldByAgent() {
    let agentPoliciesCount = {};

    // Initialize agentPoliciesCount with agent names
    agentList.forEach((agent) => {
      agentPoliciesCount[agent.firstName + " " + agent.lastName] = 0;
    });

    // Count policies sold by each agent
    userPolicyList.forEach((userPolicy) => {
      const agentName = userPolicy.agentName;
      agentPoliciesCount[agentName]++;
    });

    // Convert agentPoliciesCount to array of objects
    const result = Object.keys(agentPoliciesCount).map((agentName) => ({
      agentName: agentName,
      policiesSold: agentPoliciesCount[agentName],
    }));

    return result;
  }

  // Function to calculate total revenue generated by each agent
  function calculateRevenueByAgent() {
    let agentRevenue = {};

    // Initialize agentRevenue with agent names
    agentList.forEach((agent) => {
      agentRevenue[agent.firstName + " " + agent.lastName] = 0;
    });

    // Calculate revenue generated by each policy sold by an agent
    userPolicyList.forEach((userPolicy) => {
      const policy = policyList.find(
        (policy) => policy.id === userPolicy.policyId
      );
      const agent = agentList.find((agent) => agent.id === userPolicy.agentId);

      const installment = policy.installment;
      const duration = policy.duration;

      let revenue;
      if (duration < 30) {
        revenue = installment;
      } else {
        revenue = Math.floor(duration / 30) * installment;
      }

      agentRevenue[userPolicy.agentName] += revenue;
    });

    // Convert agentRevenue to array of objects
    const result = Object.keys(agentRevenue).map((agentName) => ({
      agentName: agentName,
      totalRevenue: agentRevenue[agentName],
    }));

    return result;
  }

  function calculateAverageRevenuePerPolicy(policiesSold, revenueByAgent) {
    let averageRevenuePerPolicy = {};

    //average revenue per policy for each agent
    policiesSold.forEach((policy) => {
      const agentName = policy.agentName;
      const policiesSoldByAgent = policy.policiesSold;
      const totalRevenueByAgent = revenueByAgent.find(
        (revenue) => revenue.agentName === agentName
      ).totalRevenue;

      if (policiesSoldByAgent == 0) averageRevenuePerPolicy[agentName] = 0;
      else
        averageRevenuePerPolicy[agentName] =
          totalRevenueByAgent / policiesSoldByAgent;
    });

    //averageRevenuePerPolicy to array of objects
    const result = Object.keys(averageRevenuePerPolicy).map((agentName) => ({
      agentName: agentName,
      averageRevenuePerPolicy: averageRevenuePerPolicy[agentName],
    }));

    console.log(averageRevenuePerPolicy);
    return result;
  }

  const policiesSold = calculatePoliciesSoldByAgent();
  const moneyGenerated = calculateRevenueByAgent();
  const averageRevenue = calculateAverageRevenuePerPolicy(
    policiesSold,
    moneyGenerated
  );

  const COLORS = [
    "#F2858E",
    "#252859",
    "#F2275D",
    "#252859",
    "#17A697",
    "#F2A341",
  ];

  return (
    <>
      <h1 className={styles.title}>Agent Analytics</h1>
      <div className={styles.mainContainer}>
        <div>
          <h3>Number of Policies Sold by Agents</h3>
          <ResponsiveContainer height={450}>
            <BarChart data={policiesSold}>
              <XAxis dataKey="agentName"></XAxis>
              <YAxis>
                <Label
                  value="Number of Policies Sold"
                  position="insideLeft"
                  angle={-90}
                />
              </YAxis>
              <Tooltip />
              <Bar dataKey="policiesSold">
                {policiesSold.map((entry, index) => (
                  <Cell
                    key={`cell-${index}`}
                    fill={COLORS[index % COLORS.length]}
                  />
                ))}
              </Bar>
            </BarChart>
          </ResponsiveContainer>
          <span style={{ textAlign: "center", display: "block" ,fontWeight:"600"}}>
            Agents
          </span>
        </div>
        <div>
          <h3>Total revenue generated by Agents</h3>
          <ResponsiveContainer height={450}>
            <LineChart width={800} height={400} data={moneyGenerated} >
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis
                dataKey="agentName"
             
              />
              <YAxis
              angle={-90}
                label={{
                  value: "Revenue (In Rs.)",
                  angle: -90,
                  position: "insideLeft",
                  dx: 0,
                }}
              />
              <Tooltip />
           
              <Line
                type="monotone"
                dataKey="totalRevenue"
                stroke="#8884d8"
                activeDot={{ r: 8 }}
              />
            </LineChart>
          </ResponsiveContainer>
          <span style={{ textAlign: "center", display: "block" ,fontWeight:"600"}}>
            Agents
          </span>
        </div>
        <div>
          <h3>Average revenue generated by Agents</h3>
          <ResponsiveContainer height={400}>
            <LineChart width={800} height={400} data={averageRevenue}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="agentName" />
              <YAxis  angle={-90}
                label={{
                  value: "Revenue (In Rs.)",
                  angle: -90,
                  position: "insideLeft",
                  dx: 0,
                }}/>
              <Tooltip />
              <Legend />
              <Line
                type="monotone"
                dataKey="averageRevenuePerPolicy"
                stroke="#8884d8"
                activeDot={{ r: 8 }}
              />
            </LineChart>
          </ResponsiveContainer>
        </div>
      </div>
    </>
  );
}


